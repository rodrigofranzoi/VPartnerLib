// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef SECLIBFRAMEWORK_SWIFT_H
#define SECLIBFRAMEWORK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SecLibFramework",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




SWIFT_CLASS("_TtC15SecLibFramework13Configuration")
@interface Configuration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, EnvironmentType, open) {
  EnvironmentTypeGCPTEST = 0,
  EnvironmentTypeGCPPRE = 1,
  EnvironmentTypeGCPPROD = 2,
};

typedef SWIFT_ENUM(NSInteger, EventCategory, open) {
  EventCategoryApplication = 0,
  EventCategoryPage = 1,
  EventCategoryControls = 2,
  EventCategoryNetwork = 3,
  EventCategoryCustom = 4,
  EventCategoryCrash = 5,
  EventCategoryUIChange = 6,
  EventCategoryExceptions = 7,
  EventCategorySwipe = 8,
};

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("EventModel")
@interface EventModel : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSString;

@interface EventModel (SWIFT_EXTENSION(SecLibFramework))
@property (nonatomic, copy) NSData * _Nullable payload;
@property (nonatomic) int64_t timestamp;
@property (nonatomic, copy) NSString * _Nullable transactionID;
@end

typedef SWIFT_ENUM(NSInteger, HTTPMethod, open) {
  HTTPMethodGet = 0,
  HTTPMethodPost = 1,
  HTTPMethodPut = 2,
  HTTPMethodPatch = 3,
  HTTPMethodDelete = 4,
  HTTPMethodUnknown = 5,
};


typedef SWIFT_ENUM(NSInteger, InvocationEvent, open) {
  InvocationEventNone = 0,
  InvocationEventShake = 1,
  InvocationEventTwoFingersSwipeLeft = 2,
};

typedef SWIFT_ENUM(NSInteger, Language, open) {
  LanguageEnglish = 0,
  LanguageGermany = 1,
};

typedef SWIFT_ENUM(NSInteger, LocalizationKeys, open) {
  LocalizationKeysWelcomeMessageTitle = 0,
  LocalizationKeysWelcomeMessageContentNone = 1,
  LocalizationKeysWelcomeMessageContentShake = 2,
  LocalizationKeysWelcomeMessageContentSwipe = 3,
  LocalizationKeysWelcomeMessageLogoLabel = 4,
  LocalizationKeysWelcomeMessageCloseButtonTitle = 5,
  LocalizationKeysCommentFieldPlaceholderForBugReport = 6,
  LocalizationKeysAddImageFromGallery = 7,
  LocalizationKeysMaxAttachementCountReached = 8,
  LocalizationKeysMaxAttachementSizeReached = 9,
  LocalizationKeysFeedbackScreenAttachmentTitle = 10,
  LocalizationKeysFeedbackScreenPrivacyPolicy = 11,
  LocalizationKeysFeedbackScreenTitle = 12,
  LocalizationKeysFeedbackScreenSendButtonTitle = 13,
  LocalizationKeysFeedbackScreenDataUsePolicy = 14,
  LocalizationKeysFeedbackScreenSmapiLogoLabel = 15,
  LocalizationKeysFeedbackScreenAlert = 16,
  LocalizationKeysFeedbackScreenOk = 17,
  LocalizationKeysEditImageAttachImage = 18,
  LocalizationKeysEditImageUndo = 19,
  LocalizationKeysFeedbackScreenRequired = 20,
  LocalizationKeysFeedbackScreenDescriptionTitle = 21,
  LocalizationKeysFeedbackScreenDescriptionPlaceholder = 22,
  LocalizationKeysFeedbackScreenAttachmentSubTitle = 23,
  LocalizationKeysFeedbackScreenMaxDescriptionCharacters = 24,
  LocalizationKeysFeedbackScreenCharactersCount = 25,
  LocalizationKeysQuickActionTitle = 26,
  LocalizationKeysQuickActionSubTitle = 27,
  LocalizationKeysQuickActionCloseButtonTitle = 28,
  LocalizationKeysEditImageTitle = 29,
  LocalizationKeysEditImageNavBarTitle = 30,
  LocalizationKeysWebViewTitle = 31,
  LocalizationKeysRatingTitle = 32,
  LocalizationKeysRatingSubTitle = 33,
  LocalizationKeysSubmit = 34,
  LocalizationKeysNotNow = 35,
  LocalizationKeysThankYou = 36,
  LocalizationKeysRatingFeedback = 37,
};


SWIFT_CLASS("_TtC15SecLibFramework19LocalizationManager")
@interface LocalizationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC15SecLibFramework16SLRequestMetrics")
@interface SLRequestMetrics : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_CLASS("_TtC15SecLibFramework6SecLib")
@interface SecLib : NSObject
/// Get or Set SMAPI Framework status.
/// By default, SMAPI will be ON
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enabled;)
+ (BOOL)enabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnabled:(BOOL)value;
/// Setup SecLib with Configuration.
/// \code
/// let config = Configuration(withEnvironment: .GCPPRE, crashEnabled: true, verboseEnabled: true, packageName: "<YOUR APP'S PACKAGE NAME>")
/// SecLib.setup(withConfiguration: config)
///
/// \endcode\param configuration Configuration object
///
+ (void)setupWithConfiguration:(Configuration * _Nonnull)configuration;
/// Setup SecLib with Environment.
/// \code
/// SecLib.setup(withEnvironment: .GCPPRE, crashHandling: true, verboseEnabled: true)
///
/// \endcode\param configuration Configuration object
///
+ (void)setupWithEnvironment:(enum EnvironmentType)environment crashHandling:(BOOL)crashHandling verboseEnabled:(BOOL)verboseEnabled;
/// Developers can call this function before setup SMAPI in order to force swizziling in early stage.
/// You  can call this before the other framework if the  other framework also using swizziling
+ (void)enableListeners;
/// Log event with custom information with “event-type”: “UICustom”
/// \code
/// let dictionary = [String: Any]()
/// dictionary["User-Type"] = "PrePaid"
/// dictionary["Accept-Status"] = true
/// let event = SecLib.logCustomEvent(withEventElement: "campaign", eventDescription: "Red campaign", onPage: "Page1", onSubPage: "NA", withCustomJSONFields: dictionary)
///
/// //SMAPI will send the event as the following:
/// // "event-description": "Red campaign"
/// // "event-element": "campaign"
/// // "event-type": "UICustom"
/// // "x-vf-custom-User-Type": "PrePaid"
/// // "x-vf-custom-Accept-Status": true
///
/// \endcode\param eventElement event-element
///
/// \param action event-description
///
/// \param pageName page-name
///
/// \param subPage subpage-name
///
/// \param customJSON custom dkey-value pair
///
+ (void)logCustomEventWithEventElement:(NSString * _Nonnull)eventElement eventDescription:(NSString * _Nonnull)action onPage:(NSString * _Nonnull)pageName onSubPage:(NSString * _Nonnull)subPage withCustomJSONFields:(NSDictionary<NSString *, id> * _Nullable)customJSON;
/// Log event with custom information
/// \code
/// let dictionary = [String: Any]()
/// dictionary["User-Type"] = "PrePaid"
/// dictionary["Accept-Status"] = true
/// let event = SecLib.logCustomEvent(withEventElement: "campaign", eventDescription: "Red campaign", onPage: "Page1", onSubPage: "NA", withCustomJSONFields: dictionary)
///
/// //SMAPI will send the event as the following:
/// // "event-description": "Red campaign"
/// // "event-element": "campaign"
/// // "event-type": "UICustom"
/// // "x-vf-custom-User-Type": "PrePaid"
/// // "x-vf-custom-Accept-Status": true
///
/// \endcode\param eventType event-type
///
/// \param eventElement event-element
///
/// \param action event-description
///
/// \param pageName page-name
///
/// \param subPage subpage-name
///
/// \param customJSON custom dkey-value pair
///
+ (void)logEventWithEventType:(enum EventCategory)eventType eventElement:(NSString * _Nonnull)eventElement eventDescription:(NSString * _Nonnull)eventDescription onPage:(NSString * _Nonnull)pageName onSubPage:(NSString * _Nonnull)subPage withCustomJSON:(NSDictionary<NSString *, id> * _Nullable)customJSON SWIFT_AVAILABILITY(ios,deprecated=3.0.4,message="'logEvent' has been renamed to 'logCustomEventWithEventElement:eventDescription:onPage:onSubPage:withCustomJSONFields:'");
/// Through this feature, target app can calculate time taken for events like app launch, network request etc. SMAPI exposes two APIs for achieving this calculation
/// unique code should be unique for each start and stop timer for the calculation
/// \code
/// SecLib.startTimer(eventElement: "App Launch", uniqueCode: 1, currentEpoch: 1234567890)
///
/// \endcode\param eventElement event-element
///
/// \param uniqueCode Should be unique for each start and stop timer for the calculation
///
/// \param currentEpoch Time Timestamp
///
+ (void)startTimerWithEventElement:(NSString * _Nonnull)eventElement uniqueCode:(NSInteger)uniqueCode currentEpoch:(double)currentEpoch;
/// Stop the timer and send event of type  Application
/// \code
/// SecLib.stopTimer(uniqueCode: 1, currentEpoch: 1646820179)
/// // SMAPI will send the event as the following:
/// // "event-description" : "43.000 sec"
/// // "event-element" : "App Launch"
/// // "event-type" : "Application"
///
/// \endcode\param uniqueCode Should be the same as the one sent in start timer  for the calculation
///
/// \param currentEpoch Time Timestamp
///
+ (void)stopTimerWithUniqueCode:(NSInteger)uniqueCode currentEpoch:(double)currentEpoch;
/// Set the screen name for the current view controller with custom name and SMAPI will use this name instead of the view controller class name
/// \code
///  SecLib.setScreenName(screenName: "Home")
///
/// \endcode
+ (void)setScreenNameWithScreenName:(NSString * _Nonnull)screenName;
/// Append the current session ID, install ID and subject ID to the URL
/// \code
///  let url = URL(string: "https://www.vodafone.com")!
/// let newURL = SecLib.appendSession(for: url)
/// // newRUL will be https://www.vodafone.com?smapi_subject_id=C32B78B4-AACE-44F0-B1F6-475F67CB1663&smapi_session_id=9b28f497-0dfe-4ef0-bb98-8ab0b434de31&smapi_install_id=4e009e53-3089-4915-a56a-ac2da7c8c10d
///
/// \endcode\param url The target URL
///
///
/// returns:
/// The same URL passed with session ID, install ID and subject ID appended as a query string parameters
+ (NSURL * _Nullable)appendSessionFor:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Send Event of type Network with custom information
/// Use this in case in you  need to log network events manually
/// It’s recomended to disable network monitor while calling this function in order not to catch the network request twice.
/// \code
/// let todoEndpoint: String = "https://jsonplaceholder.typicode.com/todos/1"
/// guard let url = URL(string: todoEndpoint) else {
///       print("Error: cannot create URL")
///       return
///    }
///    var urlRequest = URLRequest(url: url)
///    urlRequest.setValue("1fc90779-a5f5-454a-8293-5441f3df4953", forHTTPHeaderField: "vf-trace-transaction-id")
///    urlRequest.setValue("json", forHTTPHeaderField: "content-type")
///
/// // Create requestMetrics object with URL, HTTP method and HTTP Header Fields
///    let metrics = SecLib.requestMetrics(withURL: url.absoluteString,
///                                           method: .get,
///                                           requestHeaders: urlRequest.allHTTPHeaderFields ?? [:])
/// // once receive response
///    let task = session.dataTask(with: urlRequest) { (data, response, error) in
///    let response = response as? HTTPURLResponse
///    let responseHeaders = response?.allHeaderFields as? [String: String]
///    metrics.logResponse(statusCode: response?.statusCode ?? 0,
///                        responseHeaders: responseHeaders,
///                        errorDescription: error?.localizedDescription)
///    }
///    task.resume()
///
/// \endcode
+ (SLRequestMetrics * _Nullable)requestMetricsWithURL:(NSString * _Nonnull)url method:(enum HTTPMethod)method requestHeaders:(NSDictionary<NSString *, NSString *> * _Nullable)requestHeaders SWIFT_WARN_UNUSED_RESULT;
/// Sets the user ID property.
/// \param userID The user ID to ascribe to the user of this app on this device, which must be
/// non-empty and no more than 256 characters long. Setting userID to nil or invalid string removes the user ID.
///
///
/// returns:
/// nil in case of the input value was empty string or more than 256 characters long or return hashed SHA 256 string to be used as the user id
+ (NSString * _Nullable)setUserIDWithUserID:(NSString * _Nullable)userID SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// current User ID
+ (NSString * _Nullable)getUserID SWIFT_WARN_UNUSED_RESULT;
/// Setting ignored domains from being automatic captured by SMAPI network monitor
/// \code
/// // EndPoints is a list of domains
/// // For example SMAPI will not catch any network event of google.come and all of its subdomains.
/// SecLib.throtleLocalEndPoint(endPoint: ["*.google.com"])
///
/// \endcode
+ (void)throtleLocalEndPointWithEndPoint:(NSArray<NSString *> * _Nonnull)endPoint;
/// Log custom exceptions
/// \code
/// SecLib.logExceptionEvent(eventElement: "ExceptionName", exception: "Exception Reason")
///
/// \endcode\param eventElement The name of the excption
///
/// \param exception The description of the exception
///
+ (void)logExceptionEventWithEventElement:(NSString * _Nonnull)eventElement exception:(NSString * _Nonnull)exception;
+ (BOOL)getHomeDocStatus SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)getSettingAPIStatus SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getEventsCountInDb SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getTotalEventFlushed SWIFT_WARN_UNUSED_RESULT;
/// Enable or Disable crash handling
+ (void)setupCrashHandlingWithFlag:(BOOL)flag;
+ (NSString * _Nullable)getSecLibHeaderObject SWIFT_WARN_UNUSED_RESULT;
/// Enable or Disable SMAPI logs in the console
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL verboseEnabled;)
+ (BOOL)verboseEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setVerboseEnabled:(BOOL)newValue;
/// Set Tracce ID that SMAPI will fetch its value from network request header and map it into the x-vf-trace-tid fie
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull setTraceIdKey;)
+ (NSString * _Nonnull)setTraceIdKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setSetTraceIdKey:(NSString * _Nonnull)newValue;
/// Enable SMAPI to log UIScene life cycle events in target app
+ (void)setUpUIScene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// use logComponents(_:) in order to log app component name and version.
/// market should call this API once on application start.
/// \param components the value is a dictionary [String: String] as key = component name, value = component version
///
///
/// returns:
/// false if could not log components either it is empty or could not convert it to json string otherwise will return true
+ (BOOL)logComponents:(NSDictionary<NSString *, NSString *> * _Nonnull)components SWIFT_WARN_UNUSED_RESULT;
/// Enable or Disable SMAPI from monitor network request calls
/// By Default Disabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL configureNetworkMonitoring;)
+ (BOOL)configureNetworkMonitoring SWIFT_WARN_UNUSED_RESULT;
+ (void)setConfigureNetworkMonitoring:(BOOL)value;
/// Enable SMAPI for logging Table view and cllection view actions
+ (void)setUpTableViewCapture;
/// Configure trace source explicitly from target app
/// warning:
/// Usually trace source is fetch from target app bundle ID. Please inform the SecLib/SMAPI team before using this feature. This may lead to event rejection on SMAPI backend since backend configuration needs to be amended too.
+ (void)setPackageNameWithPackageName:(NSString * _Nonnull)packageName;
/// Change the target environment
/// \param environment EnvironmentType
///
+ (void)setEnvironmentWithEnvironment:(enum EnvironmentType)environment;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SecLib (SWIFT_EXTENSION(SecLibFramework))
/// Get or Set BugReport status.
/// By default, SMAPI  BugReport will be OFF
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL bugReportEnabled;)
+ (BOOL)bugReportEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)startCustomerChannelWithPrivacyURL:(NSURL * _Nonnull)dataPrivacyURL enabledWelcomeMessage:(BOOL)enabledWelcomeMessage invocationEvent:(enum InvocationEvent)invocationEvent autoShowRate:(BOOL)autoShowRate;
+ (void)showBugReport;
+ (void)stopBugReport;
+ (void)showWelcomeMessage;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum InvocationEvent customerChannelInvocationEvents;)
+ (enum InvocationEvent)customerChannelInvocationEvents SWIFT_WARN_UNUSED_RESULT;
+ (void)setCustomerChannelInvocationEvents:(enum InvocationEvent)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double customerChannelShakingThreshold;)
+ (double)customerChannelShakingThreshold SWIFT_WARN_UNUSED_RESULT;
+ (void)setCustomerChannelShakingThreshold:(double)newValue;
+ (void)setLocaleWithLanguage:(enum Language)language;
+ (void)setValue:(NSString * _Nonnull)text localizationKey:(enum LocalizationKeys)localizationKey;
+ (void)showAppRate;
@end

@class NSCoder;

SWIFT_CLASS("_TtC15SecLibFramework8StarView")
@interface StarView : UIView <UIGestureRecognizerDelegate>
@property (nonatomic) IBInspectable NSInteger ratingCount;
@property (nonatomic) IBInspectable CGFloat rating;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
@end









@protocol UICollectionViewDelegate;
@class NSIndexPath;

@interface UICollectionView (SWIFT_EXTENSION(SecLibFramework))
- (void)setDelegateWithDelegate:(id <UICollectionViewDelegate> _Nullable)delegate;
- (void)customCollectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAt:(NSIndexPath * _Nonnull)indexPath;
@end












@protocol UITableViewDelegate;

@interface UITableView (SWIFT_EXTENSION(SecLibFramework))
- (void)nsh_setWithDelegate:(id <UITableViewDelegate> _Nullable)delegate;
- (void)custom_tableView:(UITableView * _Nonnull)tableView didSelectRowAt:(NSIndexPath * _Nonnull)indexPath;
@end








@interface UIViewController (SWIFT_EXTENSION(SecLibFramework))
- (void)customTwoFingersSwipeViewDidLoad;
- (void)customViewDidLoad;
- (void)customViewDidAppearWithAnimated:(BOOL)animated;
- (void)customViewWillDisappearWithAnimated:(BOOL)animated;
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
